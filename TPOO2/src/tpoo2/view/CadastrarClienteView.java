package tpoo2.view;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import tpoo2.controller.ClienteController;
import tpoo2.model.Cliente;

public class CadastrarClienteView extends javax.swing.JFrame {
    private final ModeloTabelaCliente modelo = new ModeloTabelaCliente();
    private int linhaClicada = -1;
    
    /*
    *** CONSTRUTOR
    */
    public CadastrarClienteView() {
        initComponents();
        tabela.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabCadastrarCliente = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        Nome = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        Sobrenome = new javax.swing.JLabel();
        tSobrenome = new javax.swing.JTextField();
        RG = new javax.swing.JLabel();
        tRG = new javax.swing.JTextField();
        CPF = new javax.swing.JLabel();
        tCPF = new javax.swing.JTextField();
        Salario = new javax.swing.JLabel();
        tSalario = new javax.swing.JTextField();
        Endereco = new javax.swing.JLabel();
        tEndereco = new javax.swing.JTextField();
        incluir = new java.awt.Button();
        excluir = new java.awt.Button();
        alterar = new java.awt.Button();
        listar = new java.awt.Button();
        limpar = new java.awt.Button();
        Ordenar = new javax.swing.JLabel();
        cbOrdenar = new javax.swing.JComboBox<>();
        ListarPor = new javax.swing.JLabel();
        tListarPor = new javax.swing.JTextField();
        cbListarPor = new javax.swing.JComboBox<>();
        bVincularConta = new javax.swing.JButton();
        bManipularConta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabela.setModel(modelo);
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        scroll.setViewportView(tabela);

        Nome.setText("Nome:");

        Sobrenome.setText("Sobrenome:");

        RG.setText("RG:");

        CPF.setText("CPF:");

        Salario.setText("Salário:");

        Endereco.setText("Endereço:");

        incluir.setBackground(new java.awt.Color(33, 136, 56));
        incluir.setForeground(new java.awt.Color(240, 240, 240));
        incluir.setLabel("Incluir");

        excluir.setBackground(new java.awt.Color(220, 53, 69));
        excluir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        excluir.setForeground(new java.awt.Color(240, 240, 240));
        excluir.setLabel("Excluir");

        alterar.setBackground(new java.awt.Color(224, 168, 0));
        alterar.setLabel("Alterar");

        listar.setBackground(new java.awt.Color(0, 105, 217));
        listar.setForeground(new java.awt.Color(240, 240, 240));
        listar.setLabel("Listar");
        listar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listarMouseClicked(evt);
            }
        });

        limpar.setBackground(new java.awt.Color(19, 132, 150));
        limpar.setForeground(new java.awt.Color(240, 240, 240));
        limpar.setLabel("Limpar");
        limpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                limparMouseClicked(evt);
            }
        });

        Ordenar.setText("Ordenar por:");

        cbOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Nome", "Sobrenome", "Salário" }));
        cbOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrdenarActionPerformed(evt);
            }
        });

        ListarPor.setText("Listar por:");

        tListarPor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tListarPorKeyReleased(evt);
            }
        });

        cbListarPor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "Sobrenome", "RG", "CPF" }));
        cbListarPor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbListarPorActionPerformed(evt);
            }
        });

        bVincularConta.setBackground(new java.awt.Color(33, 136, 56));
        bVincularConta.setForeground(new java.awt.Color(240, 240, 240));
        bVincularConta.setText("Vincular Conta");
        bVincularConta.setAutoscrolls(true);
        bVincularConta.setBorder(null);
        bVincularConta.setMaximumSize(new java.awt.Dimension(92, 20));
        bVincularConta.setMinimumSize(new java.awt.Dimension(92, 20));

        bManipularConta.setBackground(new java.awt.Color(224, 168, 0));
        bManipularConta.setForeground(new java.awt.Color(0, 0, 0));
        bManipularConta.setText("Manipular Conta");
        bManipularConta.setBorder(null);

        javax.swing.GroupLayout tabCadastrarClienteLayout = new javax.swing.GroupLayout(tabCadastrarCliente);
        tabCadastrarCliente.setLayout(tabCadastrarClienteLayout);
        tabCadastrarClienteLayout.setHorizontalGroup(
            tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                        .addComponent(Ordenar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(ListarPor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbListarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tListarPor))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastrarClienteLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Nome)
                                    .addComponent(CPF)
                                    .addComponent(Salario)
                                    .addComponent(Endereco)
                                    .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Sobrenome, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(RG)))
                                .addGap(18, 18, 18)
                                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tNome)
                                    .addComponent(tSobrenome)
                                    .addComponent(tRG, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bManipularConta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bVincularConta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                                .addComponent(incluir, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        tabCadastrarClienteLayout.setVerticalGroup(
            tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ordenar)
                    .addComponent(ListarPor)
                    .addComponent(tListarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbListarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nome)
                    .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bVincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                        .addComponent(bManipularConta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(170, 170, 170))
                    .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Sobrenome)
                            .addComponent(tSobrenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RG))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CPF))
                        .addGap(9, 9, 9)
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Salario, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Endereco))
                        .addGap(39, 39, 39)))
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(incluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 632, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 2, Short.MAX_VALUE)
                    .addComponent(tabCadastrarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 2, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 571, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(tabCadastrarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /*
    *** CONTROLLER
    */
    public void setController(ClienteController controller) {
        incluir.addActionListener(e -> controller.InsertCliente());
        excluir.addActionListener(e -> controller.DeleteCliente());
        alterar.addActionListener(e -> controller.UpdateCliente());
    }
    
    
    /*
    *** INIT
    */
    public void initView() {
        java.awt.EventQueue.invokeLater(() -> this.setVisible(true));
    }
    
    
    /*
    *** INSERIR
    */
    public Cliente getClienteFormulario() {
       String nome = tNome.getText();
       String sobrenome = tSobrenome.getText();
       String rg = tRG.getText();
       String cpf = tCPF.getText();
       double salario = Double.parseDouble(tSalario.getText());
       String endereco = tEndereco.getText();
       
       return new Cliente(-1, nome, sobrenome, rg, cpf, salario, endereco);
    }
    
    public void inserirClienteView(Cliente cliente) {
        modelo.adicionaCliente(cliente);
    }
    
    
    /*
    *** EXCLUIR
    */
    public List<Cliente> getClientesParaExcluir() {
        int[] linhasSelecionadas = tabela.getSelectedRows();
        List<Cliente> listaExcluir = new ArrayList();
        
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            Cliente Cliente = modelo.getCliente(linhasSelecionadas[i]);
            listaExcluir.add(Cliente);
        }
        
        return listaExcluir;
    }
    
    public void excluirClienteView(List<Cliente> clientes) {
        modelo.removeClientes(clientes);
    }
    
    
    /*
    *** ALTERAR
    */
    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        //Pega a linha clicada
        linhaClicada = tabela.rowAtPoint(evt.getPoint());
        
        //Pega o cliente da linha clicada
        Cliente cliente = modelo.getCliente(linhaClicada);
        
        //Seta os dados nos componentes
        tNome.setText(cliente.getNome());
        tSobrenome.setText(cliente.getSobrenome());
        tRG.setText(cliente.getRG());
        tCPF.setText(cliente.getCPF());
        tSalario.setText(Double.toString(cliente.getSalario()));
        tEndereco.setText(cliente.getEndereco());
    }//GEN-LAST:event_tabelaMouseClicked

    public Cliente getClienteParaAtualizar() {
        return this.getClienteFormulario();
    }
    
    public void alterarClienteView(Cliente cliente) {
        if (linhaClicada != -1) {
            modelo.fireTableRowsUpdated(linhaClicada, linhaClicada);
        } else {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Erro ao Alterar!\n"
                    + "Nenhum cliente foi selecionado!", 
                    "Erro", JOptionPane.ERROR_MESSAGE);
            
            throw new RuntimeException();
        }
    }
    
    
    /*
    *** LISTAR
    */
    private void listarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listarMouseClicked
        List<Cliente> listaDeClientes = modelo.getClientes();
        
        Collections.sort(listaDeClientes, (o1, o2) -> Integer.toString(o1.getId()).compareTo(Integer.toString(o2.getId())));
        cbOrdenar.setSelectedItem("Selecione");
        modelo.atualizarTabela(listaDeClientes);
    }//GEN-LAST:event_listarMouseClicked
    
    
    /*
    *** LIMPAR
    */
    private void limparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_limparMouseClicked
        modelo.limpaTabela();
    }//GEN-LAST:event_limparMouseClicked
    
    
    /*
    *** ORDENAR
    */
    private void cbOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrdenarActionPerformed
        List<Cliente> listaDeClientes = modelo.getClientes();
        String ordenar = cbOrdenar.getSelectedItem().toString();
        
        switch (ordenar) {
            case "Selecione":
                Collections.sort(listaDeClientes, (o1, o2) -> 
                        Integer.toString(o1.getId()).compareTo(Integer.toString(o2.getId())));
                break;
            case "Nome":
                Collections.sort(listaDeClientes, (o1, o2) -> 
                        o1.getNome().compareTo(o2.getNome()));
                break;
            case "Sobrenome":
                Collections.sort(listaDeClientes, (o1, o2) -> 
                        o1.getSobrenome().compareTo(o2.getSobrenome()));
                break;
            case "Salário":
                Collections.sort(listaDeClientes);
                break;
        }
        
        modelo.atualizarTabela(listaDeClientes);
    }//GEN-LAST:event_cbOrdenarActionPerformed
    
    
    /*
    *** LISTAR POR
    */
    private void listarPor(String combo, String listar) {
        List<Cliente> listaDeClientes = modelo.getClientes();
        List<Cliente> novaListaDeCientes = new ArrayList();
        
        try {
            switch (combo) {
                case "Nome":
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getNome().contains(listar)) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
                case "Sobrenome":
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getSobrenome().contains(listar)) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
                case "RG":
                    Long listarRG = Long.parseLong(listar);
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getRG().equals((listarRG))) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
                case "CPF":
                    Long listarCPF = Long.parseLong(listar);
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getCPF().equals((listarCPF))) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
            }

            modelo.atualizarTabela(novaListaDeCientes);
        } catch(NumberFormatException nfe) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "O RG e CPF devem ser numéricos!",
                    "Erro", JOptionPane.ERROR_MESSAGE);
            
            cbListarPor.setSelectedItem("Nome");
        }
    }
    
    private void usarListarPor() {
        String comboOpcaoListarPor = cbListarPor.getSelectedItem().toString();
        String listarPor = tListarPor.getText();
        
        if (listarPor != null && !"".equals(listarPor))
            listarPor(comboOpcaoListarPor, listarPor);
    }    
    
    private void cbListarPorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbListarPorActionPerformed
        usarListarPor();
    }//GEN-LAST:event_cbListarPorActionPerformed

    private void tListarPorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tListarPorKeyReleased
        usarListarPor();
    }//GEN-LAST:event_tListarPorKeyReleased
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastrarClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastrarClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastrarClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastrarClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastrarClienteView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CPF;
    private javax.swing.JLabel Endereco;
    private javax.swing.JLabel ListarPor;
    private javax.swing.JLabel Nome;
    private javax.swing.JLabel Ordenar;
    private javax.swing.JLabel RG;
    private javax.swing.JLabel Salario;
    private javax.swing.JLabel Sobrenome;
    private java.awt.Button alterar;
    private javax.swing.JButton bManipularConta;
    private javax.swing.JButton bVincularConta;
    private javax.swing.JComboBox<String> cbListarPor;
    private javax.swing.JComboBox<String> cbOrdenar;
    private java.awt.Button excluir;
    private java.awt.Button incluir;
    private java.awt.Button limpar;
    private java.awt.Button listar;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTextField tCPF;
    private javax.swing.JTextField tEndereco;
    private javax.swing.JTextField tListarPor;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tRG;
    private javax.swing.JTextField tSalario;
    private javax.swing.JTextField tSobrenome;
    private javax.swing.JPanel tabCadastrarCliente;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
